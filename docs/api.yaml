openapi: 3.0.0
info:
  title: ShoppifyIO API
  version: 1.0.0
  description: API for ShoppifyIO.

servers:
  - url: 'http://127.0.0.1:5000'
    description: Localhost server

paths:
  /register:
    put:
      summary: Register new user.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        201:
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request, one or more parameters are empty or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      summary: User login.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        400:
          description: Bad request, username or password missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/add:
    post:
      summary: Add new shopping list.
      operationId: addShoppingList
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListAdd'
      responses:
        200:
          description: Shopping list successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/active:
    get:
      summary: Get active shopping lists.
      operationId: getActiveShoppingLists
      security:
        - JWT: []
      responses:
        200:
          description: Successfully retrieved active shopping lists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingListHeader'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /shopping-list/archive:
    get:
      summary: Archive a shopping list.
      operationId: archiveShoppingList
      security:
        - JWT: [ ]
      responses:
        200:
          description: Shopping list successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: token
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user's ID.
          example: 1
        username:
          type: string
          description: The user's username.
          example: johndoe
        email:
          type: string
          description: The user's email address.
          example: johndoe@example.com
    RegisterUser:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: The user's username.
          example: johndoe
        email:
          type: string
          description: The user's email address.
          example: johndoe@example.com
        password:
          type: string
          description: The user's password.
          example: '123456'
    UserLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The user's username.
          example: johndoe
        password:
          type: string
          description: The user's password.
          example: '123456'
    UserLoginResponse:
      type: object
      properties:
        token:
          type: string
          description: The authentication token.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
    ShoppingListAdd:
      type: object
      required:
        - title
        - shopping_items
      properties:
        title:
          type: string
          description: The title of the shopping list.
          example: "Groceries"
        category_id:
          type: integer
          description: The ID of the category.
          example: 1
        shopping_items:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingItemAdd'
    ShoppingItemAdd:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the shopping item.
          example: "Milk"
        quantity:
          type: integer
          description: Quantity of the item
          example: 1
        category_id:
          type: integer
          description: ID of the category assigned to the item.
          example: 12
    ShoppingList:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the shopping list.
          example: 1
        owner_id:
          type: integer
          description: The ID of the owner.
          example: 1
        title:
          type: string
          description: The title of the shopping list.
          example: "Groceries"
        creation_date:
          type: string
          format: date-time
          description: The creation date of the shopping list.
          example: "2023-06-03T12:00:00Z"
        update_date:
          type: string
          format: date-time
          description: The last update date of the shopping list.
          example: "2023-06-03T12:00:00Z"
        is_completed:
          type: boolean
          description: Whether the shopping list is completed.
          example: false
        category:
          $ref: '#/components/schemas/Category'
    ShoppingListHeader:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the shopping list.
          example: 1
        title:
          type: string
          description: The title of the shopping list.
          example: "Groceries"
        update_date:
          type: string
          format: date-time
          description: The last update date of the shopping list.
          example: "2023-06-03T12:00:00Z"
        updated_by:
          type: integer
          description: The ID of the user who last updated the shopping list.
          example: 2
        category_name:
          type: string
          description: The name of the category.
          example: "Food"
        category_color:
          type: string
          description: The color associated with the category.
          example: "#FF5733"
        user_id:
          type: integer
          description: The ID of the user.
          example: 1
        is_user_owner:
          type: boolean
          description: Whether the user is the owner of the shopping list.
          example: true
    Category:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the category.
          example: 1
        owner_id:
          type: integer
          description: The ID of the owner.
          example: 1
        type:
          type: string
          description: The type of the category.
          example: "Food"
        title:
          type: string
          description: The title of the category.
          example: "Groceries"
        description:
          type: string
          description: The description of the category.
          example: "Items to buy for daily meals."
    Error:
      type: object
      properties:
        error:
          type: string
          description: The error message.
          example: One or more parameters are empty or missing.
